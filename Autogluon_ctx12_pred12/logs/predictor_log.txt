Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.58 GB / 13.86 GB (18.6%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.58 GB / 13.86 GB (18.6%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.58 GB / 13.86 GB (18.6%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.58 GB / 13.86 GB (18.6%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
Setting presets to: fast_training
Setting presets to: fast_training
Setting presets to: fast_training
Setting presets to: fast_training

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DLinear': {'context_length': 12},
                     'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12},
                     'TemporalFusionTransformer': {'context_length': 12},
                     'Transformer': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DLinear': {'context_length': 12},
                     'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12},
                     'TemporalFusionTransformer': {'context_length': 12},
                     'Transformer': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DLinear': {'context_length': 12},
                     'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12},
                     'TemporalFusionTransformer': {'context_length': 12},
                     'Transformer': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DLinear': {'context_length': 12},
                     'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12},
                     'TemporalFusionTransformer': {'context_length': 12},
                     'Transformer': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

train_data with frequency 'IRREG' has been resampled to frequency '15min'.
train_data with frequency 'IRREG' has been resampled to frequency '15min'.
train_data with frequency 'IRREG' has been resampled to frequency '15min'.
train_data with frequency 'IRREG' has been resampled to frequency '15min'.
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'Electricity(kW)'
	target: 'Electricity(kW)'
	target: 'Electricity(kW)'
	target: 'Electricity(kW)'
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['station_name']
		categorical:        ['station_name']
		categorical:        ['station_name']
		categorical:        ['station_name']
		continuous (float): []
		continuous (float): []
		continuous (float): []
		continuous (float): []

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-08-04 00:08:18

Starting training. Start time is 2025-08-04 00:08:18

Starting training. Start time is 2025-08-04 00:08:18

Starting training. Start time is 2025-08-04 00:08:18
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Warning: path already exists! This predictor may overwrite an existing predictor! path="Autogluon_ctx12_pred12"
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
Beginning AutoGluon training... Time limit = 300s
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
AutoGluon will save models to 'c:\Users\patar\Documents\superai-intern\superaiss5-intern-vpp\Autogluon_ctx12_pred12'
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.28 GB / 13.86 GB (16.5%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.28 GB / 13.86 GB (16.5%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.28 GB / 13.86 GB (16.5%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.28 GB / 13.86 GB (16.5%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
=================== System Info ===================
AutoGluon Version:  1.4.0
Python Version:     3.11.10
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
GPU Count:          1
Memory Avail:       2.28 GB / 13.86 GB (16.5%)
Disk Space Avail:   31.27 GB / 476.05 GB (6.6%)
===================================================
Setting presets to: fast_training
Setting presets to: fast_training
Setting presets to: fast_training
Setting presets to: fast_training
Setting presets to: fast_training

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:

Fitting with arguments:
{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

{'enable_ensemble': False,
 'eval_metric': MSE,
 'freq': '15min',
 'hyperparameters': {'DeepAR': {'context_length': 12},
                     'PatchTST': {'context_length': 12}},
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 12,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'skip_model_selection': False,
 'target': 'Electricity(kW)',
 'time_limit': 300,
 'verbosity': 2}

train_data with frequency 'IRREG' has been resampled to frequency '15min'.
train_data with frequency 'IRREG' has been resampled to frequency '15min'.
train_data with frequency 'IRREG' has been resampled to frequency '15min'.
train_data with frequency 'IRREG' has been resampled to frequency '15min'.
train_data with frequency 'IRREG' has been resampled to frequency '15min'.
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 
Provided train_data has 148549 rows (NaN fraction=0.9%), 6 time series. Median time series length is 27840 (min=11692, max=27859). 

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:

Provided data contains following columns:
	target: 'Electricity(kW)'
	target: 'Electricity(kW)'
	target: 'Electricity(kW)'
	target: 'Electricity(kW)'
	target: 'Electricity(kW)'
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
	past_covariates:
		categorical:        ['station_name']
		categorical:        ['station_name']
		categorical:        ['station_name']
		categorical:        ['station_name']
		categorical:        ['station_name']
		continuous (float): []
		continuous (float): []
		continuous (float): []
		continuous (float): []
		continuous (float): []

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

To learn how to fix incorrectly inferred types, please see documentation for TimeSeriesPredictor.fit

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'

AutoGluon will gauge predictive performance using evaluation metric: 'MSE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================
===================================================
===================================================
===================================================
===================================================

Starting training. Start time is 2025-08-04 00:09:02

Starting training. Start time is 2025-08-04 00:09:02

Starting training. Start time is 2025-08-04 00:09:02

Starting training. Start time is 2025-08-04 00:09:02

Starting training. Start time is 2025-08-04 00:09:02
Models that will be trained: ['DeepAR', 'PatchTST']
Models that will be trained: ['DeepAR', 'PatchTST']
Models that will be trained: ['DeepAR', 'PatchTST']
Models that will be trained: ['DeepAR', 'PatchTST']
Models that will be trained: ['DeepAR', 'PatchTST']
Training timeseries model DeepAR. Training for up to 149.5s of the 299.0s of remaining time.
Training timeseries model DeepAR. Training for up to 149.5s of the 299.0s of remaining time.
Training timeseries model DeepAR. Training for up to 149.5s of the 299.0s of remaining time.
Training timeseries model DeepAR. Training for up to 149.5s of the 299.0s of remaining time.
Training timeseries model DeepAR. Training for up to 149.5s of the 299.0s of remaining time.
	-43.1169      = Validation score (-MSE)
	-43.1169      = Validation score (-MSE)
	-43.1169      = Validation score (-MSE)
	-43.1169      = Validation score (-MSE)
	-43.1169      = Validation score (-MSE)
	136.31  s     = Training runtime
	136.31  s     = Training runtime
	136.31  s     = Training runtime
	136.31  s     = Training runtime
	136.31  s     = Training runtime
	0.30    s     = Validation (prediction) runtime
	0.30    s     = Validation (prediction) runtime
	0.30    s     = Validation (prediction) runtime
	0.30    s     = Validation (prediction) runtime
	0.30    s     = Validation (prediction) runtime
Training timeseries model PatchTST. Training for up to 162.3s of the 162.3s of remaining time.
Training timeseries model PatchTST. Training for up to 162.3s of the 162.3s of remaining time.
Training timeseries model PatchTST. Training for up to 162.3s of the 162.3s of remaining time.
Training timeseries model PatchTST. Training for up to 162.3s of the 162.3s of remaining time.
Training timeseries model PatchTST. Training for up to 162.3s of the 162.3s of remaining time.
	-79.6846      = Validation score (-MSE)
	-79.6846      = Validation score (-MSE)
	-79.6846      = Validation score (-MSE)
	-79.6846      = Validation score (-MSE)
	-79.6846      = Validation score (-MSE)
	57.45   s     = Training runtime
	57.45   s     = Training runtime
	57.45   s     = Training runtime
	57.45   s     = Training runtime
	57.45   s     = Training runtime
	0.04    s     = Validation (prediction) runtime
	0.04    s     = Validation (prediction) runtime
	0.04    s     = Validation (prediction) runtime
	0.04    s     = Validation (prediction) runtime
	0.04    s     = Validation (prediction) runtime
Training complete. Models trained: ['DeepAR', 'PatchTST']
Training complete. Models trained: ['DeepAR', 'PatchTST']
Training complete. Models trained: ['DeepAR', 'PatchTST']
Training complete. Models trained: ['DeepAR', 'PatchTST']
Training complete. Models trained: ['DeepAR', 'PatchTST']
Total runtime: 194.19 s
Total runtime: 194.19 s
Total runtime: 194.19 s
Total runtime: 194.19 s
Total runtime: 194.19 s
Best model: DeepAR
Best model: DeepAR
Best model: DeepAR
Best model: DeepAR
Best model: DeepAR
Best model score: -43.1169
Best model score: -43.1169
Best model score: -43.1169
Best model score: -43.1169
Best model score: -43.1169
data with frequency 'IRREG' has been resampled to frequency '15min'.
data with frequency 'IRREG' has been resampled to frequency '15min'.
data with frequency 'IRREG' has been resampled to frequency '15min'.
data with frequency 'IRREG' has been resampled to frequency '15min'.
data with frequency 'IRREG' has been resampled to frequency '15min'.
Model not specified in predict, will default to the model with the best validation score: DeepAR
Model not specified in predict, will default to the model with the best validation score: DeepAR
Model not specified in predict, will default to the model with the best validation score: DeepAR
Model not specified in predict, will default to the model with the best validation score: DeepAR
Model not specified in predict, will default to the model with the best validation score: DeepAR
